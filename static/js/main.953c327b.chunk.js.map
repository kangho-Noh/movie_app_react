{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","console","log","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAqCeA,MA/Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAGV,aAFA,CAEA,MAAgBL,UAAU,gBAA1B,SACGI,GADMC,QAKb,mBAAGL,UAAU,iBAAb,SAA+BH,EAAQS,MAAM,EAAG,KAAO,eCuDhDC,G,kNAnEbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAMVC,U,sBAAY,8BAAAC,EAAA,6DACVC,QAAQC,IAAI,6CADF,SASAC,IAAMC,IACd,yEAVQ,uBAOEN,EAPF,EAMRO,KACEA,KAAQP,OAUZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAjBzB,kBAkBHC,GAlBG,2C,uDAsBZ,WACES,KAAKR,YACLE,QAAQC,IAAI,+C,oBAGd,WACED,QAAQC,IAAI,gBAGZ,MAA8BK,KAAKX,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAACiB,GAAD,OACV,cAAC,EAAD,CAEE1B,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,QANTqB,EAAM1B,e,GApDT4B,IAAMC,YCLxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.953c327b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n//img의 alt와 title은 사진에 마우스 올렸을 때 나오는 제목 표시하기 위함\r\n//css를 하기 위해서 style={{}}를 사용할 수 있다.\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            //map은 (현재값, 인덱스) 두개의 아규먼트를 넘김\r\n            //key값이 없으면 오류가 나기때문에 index로 key를 만들어서 제공한다\r\n            <li key={index} className=\"genres__genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180) + \"...\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"./Movie\";\r\nimport \"./App.css\";\r\n/*\r\nclass와 className 리액트 내의 html은 html이 아니라 JSX다. \r\n결국 JS와 문법을 같이하는 것이므로, class, for 과 같이 속성이름과\r\n자바스크립트의 문법과 같은 이름을 가진 것들을 구분하기 위해 JSX에는 class 대신 className을 사용한다.\r\n*/\r\nclass App extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  }; //state에 사용할 변수를 미리 선언하지 않아도 된다. setState만 써도 됨.\r\n  //하지만 이렇게 써놓는 것이 코드 읽기에 편하기 때문에 선언하는 습관을 들이는 것이 좋겠다.\r\n\r\n  //함수 비동기화. axios가 데이터를 불러오기를 기다려준다.\r\n  //async와 await은 한 세트\r\n  getMovies = async () => {\r\n    console.log(\"API 불러오기 시작\");\r\n    /*const movies = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json\");\r\n  console.log(movies.data.data.movies);*/\r\n    //위 방법은 .이 너무 많아서 ES6에서 다르게 표현 가능해졌다\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\r\n    );\r\n    //await 함수는 비동기적으로 동작함.\r\n\r\n    //console.log(movies);\r\n\r\n    //this.setState({movies:movies});//앞의 movies는 state의 movies, 뒤 movies는 axios로 가져온 movies\r\n    this.setState({ movies, isLoading: false }); //ES6의 문법으로 그냥 movies만 써도 이해함\r\n    return movies;\r\n  };\r\n\r\n  //componentDidMount에서 이론적으로 data를 fetch한다\r\n  componentDidMount() {\r\n    this.getMovies();\r\n    console.log(\"API 불러오기 완료\"); //getMovies와 비동기적으로 동작. 그러나 안에 있는 await가 붙은 함수만 동기적으로 동작.\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render start\");\r\n    /*this.state.isLoading 대신 그냥 isLoading 사용을 위한 전처리\r\n    ES6 문법임. isLoading은 this.state에서 온거다.*/\r\n    const { isLoading, movies } = this.state;\r\n\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n              <Movie //{return } 대신 () 사용해도 된다.\r\n                key={movie.id}\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}